* Emacs Configuration
** globals

Adhere to [[https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html][XDG conventions]]. The data home directory is for files that support the user experience in some noticeable way and which cannot be regenerated automatically. The cache home directory on the other hand should only house files that can be regenerated automatically.

#+BEGIN_SRC emacs-lisp
(defconst config:data-home-dir
  (concat (if-let ((dir (getenv "XDG_DATA_HOME")))
            (file-name-as-directory dir)
            (concat (file-name-as-directory (getenv "HOME"))
                    (file-name-as-directory ".local")
                    (file-name-as-directory "share")))
          (file-name-as-directory "emacs")))

(defconst config:cache-home-dir
  (concat (if-let ((dir (getenv "XDG_CACHE_HOME")))
            (file-name-as-directory dir)
            (concat (file-name-as-directory (getenv "HOME"))
                    (file-name-as-directory ".cache")))
          (file-name-as-directory "emacs")))
#+END_SRC

Manage indentation.

#+BEGIN_SRC emacs-lisp
(defvar config:preferred-tab-width 2)

(defun config:disable-tabs ()
  (setq indent-tabs-mode nil))

(defun config:enable-tabs ()
  (setq indent-tabs-mode t
        tab-width config:preferred-tab-width))
#+END_SRC

** basics

Create directories if they do not already exist.

#+BEGIN_SRC emacs-lisp
(unless (file-exists-p config:data-home-dir)
  (make-directory config:data-home-dir t))

(unless (file-exists-p config:cache-home-dir)
  (make-directory config:cache-home-dir t))
#+END_SRC

Show neither the default startup screen nor the default =*scratch*= buffer message.

#+BEGIN_SRC emacs-lisp
(setq-default inhibit-startup-screen t
              initial-scratch-message "")
#+END_SRC

Tabs. I generally prefer them to spaces. Lisp code being one exception.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'config:enable-tabs)
(add-hook 'lisp-mode-hook 'config:disable-tabs)
(add-hook 'emacs-lisp-mode-hook 'config:disable-tabs)
#+END_SRC

Wrap lines at eighty characters. This applies to, for example, =visual-line-mode=.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

Make sure there is a newline at the end of files. Things work better that way on a Unix-like system.

#+BEGIN_SRC emacs-lisp
(setq-default require-final-newline t)
#+END_SRC

Highlight matching parentheses. Very nice.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

If an external process modifies a file opened in Emacs, automatically update the buffer to display the latest file contents.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Display column number information in the mode line.

#+BEGIN_SRC emacs-lisp
(column-number-mode)
#+END_SRC

=Y/n= should suffice as a confirmation prompt.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Inputted text deletes marked text.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode)
#+END_SRC

By default, Emacs will litter your filesystem with backup files (files with names ending in =~=). I prefer instead to centralize them all in one location.

#+BEGIN_SRC emacs-lisp
(let ((dir (concat config:cache-home-dir
                   (file-name-as-directory "backups"))))
  (setq-default backup-directory-alist `((".*" . ,dir))
                backup-by-copying t
                version-control t
                delete-old-versions t))
#+END_SRC

Auto-save files (files with names flanked on either side by =#=) can be annoying as well.

#+BEGIN_SRC emacs-lisp
(let ((dir (concat config:cache-home-dir
                   (file-name-as-directory "saves"))))
  (unless (file-exists-p dir) (make-directory dir))
  (setq-default auto-save-file-name-transforms `((".*" ,dir t))))
#+END_SRC

Emacs will create a tree under the configuration directory to keep track of files that have been auto-saved. Create it under the data home directory rather.

#+BEGIN_SRC emacs-lisp
(let ((prefix (concat config:cache-home-dir
                      (file-name-as-directory "auto-save-list")
                      "saves-")))
  (setq-default auto-save-list-file-prefix prefix))
#+END_SRC

Emacs attempts to use locks to resolve issues arising from multiple users modifying some file concurrently. The locks are recorded by creating a file in the same directory as the file being modified, which can be annoying. Because my machine is shared with no one else, I elect to disable this functionality altogether. Another solution might be more appropriate however.

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

Using the =customize= interface will prompt Emacs to insert some rubbish into one's configuration file. That rubbish can instead go inside and be loaded from the data home directory.

#+BEGIN_SRC emacs-lisp
(let ((f (concat config:data-home-dir "custom.el")))
  (setq-default custom-file f)
  (when (file-exists-p f) (load f)))
#+END_SRC

Use =recentf= mode. This enables Emacs to remember the files which it has visited recently.

#+BEGIN_SRC emacs-lisp
(setq-default recentf-save-file (concat config:data-home-dir "recentf"))
(recentf-mode)
#+END_SRC

Bookmarks enable one to easily jump to specific points in a file. Save bookmark data to the data home directory.

#+BEGIN_SRC emacs-lisp
(setq-default bookmark-default-file (concat config:data-home-dir "bookmarks"))
#+END_SRC

Save abbreviation data to the data home directory.

#+BEGIN_SRC emacs-lisp
(setq-default abbrev-file-name (concat config:data-home-dir "abbrev_defs"))
#+END_SRC

*** TODO Handle whitespace more intelligently.

Delete unnecessary whitespace on save. This is a double-edged sword because one may have to edit files produced and maintained by others who are not as fastidious about their whitespace, and in such cases the abundance of whitespace removed by the following hook can result in disorderly version-control /diffs/.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** packages

The subsequent commands depend on the =package= module.

#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC

Set the package archives in which Emacs searches for packages. Melpa is not included by default, but it contains many useful packages.

#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

Emacs stores packages under the configuration directory by default. It also stores some crytographic keys to verify packages. Since these artifacts can be reproduced automatically, they are better stored in the cache home directory.

#+BEGIN_SRC emacs-lisp
(let* ((a (concat config:cache-home-dir (file-name-as-directory "packages")))
       (b (concat a (file-name-as-directory "gnupg"))))
  (setq package-user-dir a
        package-gnupghome-dir b))
#+END_SRC

This function needs to be called before installing any packages.

#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

Emacs keeps a local record of the packages available from the archives. This record is required to exist before any packages can be installed. It is a good idea to occasionally update this record manually. Updating it automatically each time Emacs starts would slow down the start-up process too much.

#+BEGIN_SRC emacs-lisp
(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

** use-package

The =use-package= package makes it easy to install and configure packages, so install that package first the "old-fashioned" way, and then install subsequent packages with the aid of =use-package=.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
#+END_SRC

The following two variables respectively instruct =use-package= to, by default, install packages if they do not already exist locally and load packages only when they are needed. This is usually the desired behavior.

#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)

(setq use-package-always-ensure t
      use-package-always-defer t)
#+END_SRC

The delight package allows one to remove mode indicators from the mode line. It can be used within the =use-package= macro.

#+BEGIN_SRC emacs-lisp
(use-package delight)
#+END_SRC

** keybindings

I use the non-standard Dvorak keyboard layout, and therefore I find it needful to customize the default Emacs keybindings quite heavily.

*** commands

Move the cursor to the point of indentation. If the cursor is already there, move it to the beginning of the line, disregarding indentation.

#+BEGIN_SRC emacs-lisp
(defun config:beginning-of-line-dwim ()
  (interactive)
  (let ((p0 (point)))
    (back-to-indentation)
    (when (= p0 (point))
      (move-beginning-of-line 1))))
#+END_SRC

*** insert mode

Create a minor-mode which, when activated, will bring my customizations into effect. First specify the mode map.

#+BEGIN_SRC emacs-lisp
(defvar config:custom-kbd-mode-map
  (let ((map (make-keymap)))
    (mapcar (lambda (x) (define-key map (kbd (car x)) (cdr x)))
      '(("C-u" . backward-char)
        ("C-h" . forward-char)
        ("C-e" . previous-line)
        ("C-t" . next-line)
        ("C-o" . config:beginning-of-line-dwim)
        ("C-n" . move-end-of-line)
        ("M-e" . scroll-down-line)
        ("M-t" . scroll-up-line)
        ("C-z" . undo)
        ("C-d" . delete-char)
        ("M-;" . comment-dwim)
        ("C-SPC" . set-mark-command)
        ("M-c" . kill-ring-save)
        ("M-v" . yank)
        ("M-b" . kill-region)))
    map))
#+END_SRC

And then create the minor mode.

#+BEGIN_SRC emacs-lisp
(define-minor-mode config:custom-kbd-mode
  "A minor mode consisting of my personal, custom keybindings."
  :init-value t
  :keymap config:custom-kbd-mode-map)
#+END_SRC

Keymaps added to the following list have the highest precedence.

#+BEGIN_SRC emacs-lisp
(add-to-list 'emulation-mode-map-alists
  `((config:custom-kbd-mode . ,config:custom-kbd-mode-map)))
#+END_SRC

*** normal mode

Modal editing is supposedly better for your health.

#+BEGIN_SRC emacs-lisp
(use-package ryo-modal
  :commands ryo-modal-mode
  :bind
  (:map config:custom-kbd-mode-map
   ("C-c n" . ryo-modal-mode))
  :config
  (ryo-modal-keys
   ("," ryo-modal-repeat)
   ("i" ryo-modal-mode)
   ("u" backward-char)
   ("h" forward-char)
   ("e" previous-line)
   ("t" next-line)
   ("o" config:beginning-of-line-dwim)
   ("n" move-end-of-line)
   ("d" delete-char)
   ("z" undo)
   ("SPC" set-mark-command)
   ("g" keyboard-quit)
   (";" comment-dwim)
   ("c" kill-ring-save)
   ("v" yank)
   ("k" kill-region)
   ("<" beginning-of-buffer)
   (">"	end-of-buffer))
  (ryo-modal-keys
   (:norepeat t)
   ("x" "M-x")
   ("0" "M-0")
   ("1" "M-1")
   ("2" "M-2")
   ("3" "M-3")
   ("4" "M-4")
   ("5" "M-5")
   ("6" "M-6")
   ("7" "M-7")
   ("8" "M-8")
   ("9" "M-9")))
#+END_SRC

** terminal

The following settings apply to the terminal UI.

#+BEGIN_SRC emacs-lisp
(unless (display-graphic-p)
  (menu-bar-mode -1)
  (xterm-mouse-mode 1)
  ;; maybe the mouse bindings don't need to be TUI-specific
  (global-set-key (kbd "<mouse-2>") 'yank)
  (global-set-key (kbd "<mouse-3>") 'kill-ring-save)
  (global-set-key (kbd "<mouse-4>") (lambda ()
                                      (interactive)
                                      (scroll-down-line)
                                      (previous-line)))
  (global-set-key (kbd "<mouse-5>") (lambda ()
                                      (interactive)
                                      (scroll-up-line)
                                      (next-line))))
#+END_SRC

This package enables Emacs to interact with the system clipboard, so that the things you try to copy and paste with Emacs can be used by other applications as well. But the package is not working for me right now...

#+BEGIN_SRC emacs-lisp
(use-package xclip
  :init (xclip-mode)
  ;;:load-path "elpa/packages/xclip"
)

(setq select-enable-primary t)
#+END_SRC

** appearance

#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme :disabled
  :init (load-theme 'zenburn))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package base16-theme :disabled
  :init (load-theme 'base16-default-dark))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :init (color-theme-sanityinc-tomorrow-night))
#+END_SRC

** built-in packages
*** dired

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :bind
  (:map dired-mode-map
   ("h" . forward-char)
   ("u" . backward-char)
   ("t" . dired-next-line)
   ("C-t" . dired-next-line)
   ("e" . dired-previous-line)
   ("C-e" . dired-previous-line))
  :custom
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always))
#+END_SRC

*** uniquify

Make Emacs do a better job of distinguishing files which have the same name but live in different directories.

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :ensure nil
  :custom (uniquify-buffer-name-style 'forward))
#+END_SRC

*** org

I believe one can obtain a more up-to-date, full-featured version of Org from Melpa, but thus far my needs have been satisfied by whatever's included with Emacs.

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :hook (org-mode . visual-line-mode))
#+END_SRC

*** eldoc

Litter not my mode line.

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :delight)
#+END_SRC

*** outline

Same as above.

#+BEGIN_SRC emacs-lisp
(use-package outline
  :ensure  nil
  :delight outline-minor-mode)
#+END_SRC

** external packages
*** ace-window

Manage windows like an ace.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind
  (:map config:custom-kbd-mode-map
   ("C-w" . ace-window))
  :ryo ("w" ace-window)
  :custom (aw-keys '(?a ?o ?e ?u ?h ?t ?n ?s)))
#+END_SRC

*** ivy, counsel, swiper

Ivy completes things.

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :delight
  :init (ivy-mode)
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "%d/%d "))
#+END_SRC

Counsel makes some things better, I think?

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :delight
  :init (counsel-mode)
  :bind
  (:map config:custom-kbd-mode-map
   ("C-c f" . counsel-find-file)
   ("C-c r" . counsel-recentf))
  :after (ivy))
#+END_SRC

Swiper is how I search through the current buffer.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind
  (:map config:custom-kbd-mode-map
   ("C-s" . swiper))
  :ryo ("s" swiper)
  :after (ivy))
#+END_SRC

*** avy

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  (:map config:custom-kbd-mode-map
   ("C-a" . avy-goto-char-timer)
   ("M-a" . avy-pop-mark))
  :ryo
  ("a" avy-goto-char-timer)
  ("A" avy-pop-mark)
  :custom
  (avy-keys '(?a ?o ?e ?u ?h ?t ?n ?s))
  (avy-timeout-seconds 0.2))
#+END_SRC

*** undo-tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :delight
  :init (global-undo-tree-mode)
  :bind
  (:map config:custom-kbd-mode-map
    ("M-z"     . undo-tree-visualize))
  (:map undo-tree-visualizer-mode-map
    ("u"       . undo-tree-visualize-switch-branch-left)
    ("h"       . undo-tree-visualize-switch-branch-right)
    ("e"       . undo-tree-visualize-undo)
    ("t"       . undo-tree-visualize-redo)
    ("a"       . undo-tree-visualizer-abort)
    ("C-g"     . undo-tree-visualizer-abort)
    ("C-c C-c" . undo-tree-visualizer-quit))
  :custom
  (undo-tree-auto-save-history t)
  (undo-tree-history-directory-alist
    `((".*" . ,(concat config:data-home-dir (file-name-as-directory "undo-tree"))))))
#+END_SRC

*** dired-sidebar

#+BEGIN_SRC emacs-lisp
(use-package dired-sidebar
  :commands dired-sidebar-toggle-sidebar
  :bind
  (:map config:custom-kbd-mode-map
   ("C-c s" . dired-sidebar-toggle-sidebar))
  :ryo
  ("p" (("t" (("s" dired-sidebar-toggle-sidebar))))))
#+END_SRC

*** rainbow-delimiters

Colorful parentheses.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** smartparens

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :delight
  :init
  (smartparens-global-mode)
  :bind
  (:map config:custom-kbd-mode-map
   ("C-M-s" . sp-forward-slurp-sexp)              ; make hydra
   ("C-M-b" . sp-forward-barf-sexp))
  :ryo
  ("S" sp-forward-slurp-sexp)
  ("B" sp-forward-barf-sexp)
  :config
  (require 'smartparens-config)
  (sp-local-pair 'prog-mode "{" nil :post-handlers '(:add ("||\n[i]" "RET")))
  (sp-local-pair 'prog-mode "(" nil :post-handlers '(:add ("||\n[i]" "RET")))
  (sp-local-pair 'prog-mode "[" nil :post-handlers '(:add ("||\n[i]" "RET"))))
#+END_SRC

*** company

#+BEGIN_SRC emacs-lisp
(use-package company
  :delight
  :init (global-company-mode)
  :bind
  (:map company-active-map
   ("C-t" . company-select-next)
   ("C-e" . company-select-previous)
   ("C-g" . company-abort)
   ("C-h" . company-abort)))
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :delight
  :init (global-flycheck-mode))
#+END_SRC

*** projectile

Projectile is a project-management tool for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package projectile                           ; requires fd
  :delight
  :custom
  (projectile-completion-system 'ivy)
  (projectile-known-projects-file (concat config:data-home-dir
                                          "projectile-bookmarks.eld"))
  (projectile-cache-file (concat config:cache-home-dir "projectile.cache")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :init (counsel-projectile-mode)
  :bind
  (:map projectile-command-map
   ("s" . counsel-projectile-rg))                 ; require ripgrep
  (:map config:custom-kbd-mode-map
   ("C-c p" . projectile-command-map)))
#+END_SRC

*** frog-jump-buffer

Buffer-jumping, frog-style.

#+BEGIN_SRC emacs-lisp
(use-package frog-jump-buffer :disabled
  :bind
  (:map config:custom-kbd-mode-map
   ("C-b" . frog-jump-buffer))
  :custom
  (frog-jump-buffer-default-filter 'frog-jump-buffer-filter-file-buffers)
  (frog-jump-buffer-include-current-buffer nil)
  :config
  (with-eval-after-load 'frog-menu
    (setq frog-menu-avy-keys (string-to-list "aoeuhtns"))))
#+END_SRC

*** git
**** magit

Magit is the magical git porcelain. One of its dependencies, transient, will litter your configuration directory if you let it.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-c g" . magit-status)
  :config
  (with-eval-after-load 'transient
    (let ((dir (concat config:data-home-dir (file-name-as-directory "transient"))))
      (setq transient-levels-file  (concat dir "levels.el")
            transient-values-file  (concat dir "values.el")
            transient-history-file (concat dir "history.el")))))
#+END_SRC

*** lsp

The Language Server Protocol brings IDE-like features to Emacs.

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-enable-snippet nil)                        ; kill the warning
  (lsp-session-file (concat config:data-home-dir "lsp-session"))
  (lsp-prefer-flymake nil)
  ;;(lsp-enable-file-witchers nil)                ; misspelled...is this needed?
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode))
#+END_SRC

Use company with lsp.

#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :config (push 'company-lsp company-backends)
  :after (lsp-mode company))
#+END_SRC

** languages
*** rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode ("\\.rs$" . rust-mode)
  :hook
  (rust-mode . lsp)                               ; requires rls
  :bind
  (:map rust-mode-map
   ("TAB" . company-indent-or-complete-common))
  :custom
  (rust-format-on-save t)                         ; requires rustfmt
  (rust-indent-offset config:preferred-tab-width))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-rust
  :hook ((fylcheck-mode rust-mode) . flycheck-rust-setup))
#+END_SRC

*** python

#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :if (executable-find "python")
  :mode ("\\.py$" . python-mode)
  :interpreter ("python" . python-mode)
  :hook (python-mode . lsp)                       ; requires pyls
  :config
  (with-eval-after-load 'lsp
    (add-hook 'before-save-hook 'lsp-format-buffer nil t)
    (setq lsp-pyls-plugins-pylint-args ["--rcfile=setup.cfg"]))
  :custom
  (python-indent-offset config:preferred-tab-width)
  (python-indent-guess-indent-offset nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(use-package lsp-python-ms :disabled
  :hook
  (python-mode . (lambda ()
                   (require 'lsp-python-ms)
                   (lsp)))
  :custom (lsp-python-ms-executable "mspyls")
  :after (python))
#+END_SRC

*** web

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode
  ("\\.njk$" "\\.ejs$")
  :custom
  (web-mode-markup-indent-offset config:preferred-tab-width)
  (web-mode-enable-auto-closing  t)
  (web-mode-enable-auto-opening  t)
  (web-mode-enable-auto-quoting  t)
  :config
  (with-eval-after-load 'smartparens
    (add-hook 'web-mode-hook
    (lambda () ;; also remove the pair in other file types
      (when (string= (file-name-extension buffer-file-name) "njk")
        (sp-local-pair 'web-mode  "{%" "%}" :post-handlers '(:add " | ")))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package pug-mode
  :mode
  ("\\.pug$")
  :custom
  (pug-tab-width config:preferred-tab-width))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package js
  :ensure nil
  :mode
  (("\\.jsx?$" . js-mode)
   ("\\.json$" . js-mode))
  :hook (js-mode . lsp)                           ; requires typescript-language-server
  :custom
  (js-indent-level config:preferred-tab-width))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :delight
  :hook (js-mode . prettier-js-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :custom (css-indent-offset config:preferred-tab-width))
#+END_SRC

*** shell

#+BEGIN_SRC emacs-lisp
(use-package fish-mode
  :mode "\\.fish$"
  :custom (fish-indent-offset config:preferred-tab-width))
#+END_SRC

*** lisp

Clobber mode line indicator.

#+BEGIN_SRC emacs-lisp
(use-package slime-autodoc
  :ensure nil
  :delight)
#+END_SRC

The Superior Lisp Interaction Mode for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package slime
  :custom
  (inferior-lisp-program (executable-find "sbcl"))
  (slime-contribs '(slime-fancy)))
#+END_SRC

*** scheme

#+BEGIN_SRC emacs-lisp
(use-package geiser
  :custom (geiser-active-implementations '(guile)))
#+END_SRC
